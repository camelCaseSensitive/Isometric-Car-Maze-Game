// These are the four numbers that define the transform, i hat and j hat
const i_x = 1;
const i_y = 0.5;
const j_x = -1;
const j_y = 0.5;

let tileScale = 2;

let timer = 0;

// Sprite size
const w = 32 * tileScale;
const h = 32 * tileScale;

let track0 = [
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
  [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
  [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0],
  [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
  [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
  [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0],
  [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0],
  [0, 2, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0],
  [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0],
  [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
  [0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0],
  [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]

let track11 =[[0,0,0,1,1,1,1,1,1,1,1,1,0,0,0], 
              [0,1,1,1,0,1,0,1,0,0,0,1,0,0,0], 
              [1,1,0,0,0,1,0,1,0,0,0,1,0,0,0], 
              [1,0,0,0,1,1,0,1,0,0,1,1,1,1,0], 
              [1,0,0,1,1,0,0,1,0,1,1,0,0,1,0], 
              [1,0,1,1,0,0,0,1,0,1,0,0,0,1,0], 
              [1,0,1,0,0,0,0,1,0,1,1,0,0,1,0], 
              [1,0,1,1,1,1,0,1,0,0,1,1,0,1,0], 
              [1,0,0,0,0,1,0,1,0,0,0,1,0,1,0], 
              [1,0,0,1,1,1,0,1,0,1,1,1,0,1,0], 
              [1,0,0,1,0,0,0,1,0,1,0,1,0,1,0], 
              [1,1,0,1,0,0,0,2,0,1,0,1,0,1,0], 
              [0,1,0,1,0,0,0,1,0,1,0,1,0,1,0], 
              [0,1,1,1,1,1,1,1,1,1,0,1,1,1,0], 
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]] 

let track12 =[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
              [0,0,0,1,1,1,1,1,0,0,1,1,1,0,0], 
              [0,0,0,1,0,0,0,1,0,1,1,0,1,0,0], 
              [0,1,1,1,0,1,1,1,0,1,0,0,1,0,0], 
              [0,1,0,0,0,1,0,0,0,1,0,1,1,0,0], 
              [0,1,0,1,0,1,1,1,1,1,0,1,0,0,0], 
              [0,2,0,0,0,0,0,1,0,0,0,1,1,1,0], 
              [0,1,0,0,0,0,0,0,0,0,0,0,0,1,0], 
              [0,1,0,0,1,1,1,1,1,0,0,0,0,1,0], 
              [0,1,1,1,1,0,1,0,1,0,0,0,0,1,0], 
              [0,0,0,0,0,0,1,0,1,0,0,1,1,1,0], 
              [0,0,0,0,0,0,1,0,1,0,0,1,0,0,0], 
              [0,0,0,0,0,0,1,1,1,1,1,1,0,0,0], 
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]] 

let track13 =[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
              [0,0,0,0,0,1,1,1,1,1,0,0,0,0,0], 
              [0,0,0,0,1,1,0,0,0,1,1,0,0,0,0], 
              [0,0,0,1,1,0,0,0,0,0,1,1,0,0,0], 
              [0,0,1,1,0,0,0,0,0,0,0,1,1,0,0], 
              [0,0,1,0,0,0,0,0,0,0,0,0,1,0,0], 
              [0,0,1,0,0,0,0,0,0,0,0,0,1,0,0], 
              [0,0,2,0,0,0,0,0,0,0,0,0,1,0,0], 
              [0,0,1,0,0,0,0,0,0,0,0,0,1,0,0], 
              [0,0,1,1,0,0,0,0,0,0,0,1,1,0,0], 
              [0,0,0,1,1,0,0,0,0,0,1,1,0,0,0], 
              [0,0,0,0,1,1,0,0,0,1,1,0,0,0,0], 
              [0,0,0,0,0,1,1,1,1,1,0,0,0,0,0], 
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]] 

let track14 =[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
              [1,1,1,1,1,0,0,0,0,1,0,0,1,1,0], 
              [1,0,0,0,1,1,1,1,1,1,1,0,0,1,0], 
              [1,0,1,1,1,0,0,0,0,0,1,1,1,1,0], 
              [1,0,1,0,0,0,1,1,1,0,0,1,0,0,0], 
              [1,0,1,0,1,1,1,0,1,1,1,1,0,1,0], 
              [1,0,1,0,1,0,0,0,0,1,0,0,0,1,0], 
              [1,0,0,0,1,0,0,0,0,1,0,0,0,1,0], 
              [1,1,1,0,1,1,1,0,1,1,1,1,0,1,0], 
              [0,0,1,0,0,0,1,0,1,0,0,1,0,1,0], 
              [0,1,1,1,1,0,1,1,1,0,1,1,1,1,0], 
              [0,1,0,0,1,0,0,1,0,0,1,0,0,0,0], 
              [0,1,0,0,1,0,0,2,0,0,1,0,0,1,0], 
              [0,1,1,1,1,1,1,1,0,1,1,1,1,1,0], 
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]] 

let track1=  [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
              [0,1,1,1,1,1,1,1,0,1,1,1,1,1,0],
              [0,1,0,0,0,0,0,1,0,1,0,0,0,1,0],
              [0,1,0,0,0,0,0,1,0,1,0,0,0,1,0],
              [0,1,1,1,1,1,0,1,0,1,1,1,0,1,0],
              [0,0,0,0,0,1,0,1,0,0,0,1,0,1,0],
              [0,0,0,0,0,2,0,1,0,0,0,1,0,1,0],
              [0,1,1,1,0,1,0,1,1,1,0,1,0,1,0],
              [0,1,0,1,1,1,0,0,0,1,0,1,0,1,0],
              [0,1,0,0,0,0,0,0,0,1,0,1,0,1,0],
              [0,1,0,0,1,1,1,1,0,1,1,1,0,1,0],
              [0,1,0,0,1,0,0,1,0,0,0,0,0,1,0],
              [0,1,0,0,1,0,0,1,1,0,0,0,0,1,0],
              [0,1,1,1,1,0,0,0,1,1,1,1,1,1,0],
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]] 

let track6 = [[0,0,0,1,0,0,0,0,0,0,0,0,0,0,0], 
              [0,0,0,0,0,1,1,1,1,0,0,1,1,1,0], 
              [0,1,1,1,0,1,0,0,1,0,0,1,0,1,0], 
              [0,1,0,1,0,1,0,0,1,1,1,1,0,2,0], 
              [0,1,0,1,1,1,0,0,0,0,0,1,0,1,0], 
              [0,1,0,0,0,0,0,0,0,0,0,1,0,1,0], 
              [1,1,1,0,0,0,0,0,1,1,1,1,0,1,1], 
              [1,0,1,0,1,1,1,0,1,0,0,0,0,0,1], 
              [1,0,1,0,1,0,1,0,1,0,0,0,0,0,1], 
              [1,0,1,0,1,0,1,1,1,0,1,1,1,0,1], 
              [1,0,1,0,1,0,0,0,0,0,1,0,1,0,1], 
              [1,0,1,1,1,0,0,1,1,1,1,0,1,0,1], 
              [1,0,1,0,0,0,0,1,0,0,0,0,1,1,1], 
              [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0], 
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]] 

let track7 = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
              [0,1,1,1,0,0,0,1,1,1,1,0,0,0,0],
              [0,1,0,1,1,0,0,1,0,0,1,1,0,0,0],
              [0,1,0,0,1,0,0,1,0,0,0,1,1,0,0],
              [0,1,0,0,1,0,0,1,0,0,0,0,1,0,0],
              [0,1,0,0,1,0,0,2,0,0,0,0,1,0,0],
              [0,1,0,1,1,0,0,1,0,0,0,0,1,0,0],
              [0,1,0,1,0,0,0,1,0,0,0,0,1,1,0],
              [0,1,0,1,0,0,0,1,0,0,0,0,0,1,0],
              [0,1,0,1,0,1,1,1,0,0,0,0,0,1,0],
              [0,1,0,1,1,1,0,0,0,0,0,0,0,1,0],
              [0,1,0,0,0,0,0,0,1,1,1,0,0,1,0],
              [0,1,0,0,0,0,0,0,1,0,1,1,0,1,0],
              [0,1,1,1,1,1,1,1,1,0,0,1,1,1,0],
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]
              
let track8 = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
              [0,1,1,1,1,1,1,1,1,1,1,1,1,1,0], 
              [0,1,0,0,0,0,0,0,0,0,0,0,0,1,0], 
              [0,1,0,0,1,1,1,1,1,1,1,1,0,1,0], 
              [0,1,0,0,1,0,0,0,0,0,0,1,0,1,0], 
              [0,1,0,1,1,0,1,1,1,0,0,1,0,1,0], 
              [0,1,0,1,0,0,1,0,1,0,0,1,0,1,0], 
              [0,1,0,1,0,0,1,0,1,1,0,1,0,1,0], 
              [0,1,0,1,0,0,2,0,0,1,0,1,0,1,0], 
              [0,1,0,1,0,0,1,0,0,1,0,1,0,1,0], 
              [0,1,0,1,1,0,1,0,0,1,0,1,0,1,0], 
              [0,1,0,0,1,1,1,0,0,1,0,1,0,1,0], 
              [0,1,0,0,0,0,0,0,1,1,0,1,0,1,0], 
              [0,1,1,1,1,1,1,1,1,0,0,1,1,1,0], 
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]] 

let track9 = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
              [0,1,1,1,1,1,1,1,1,1,1,1,0,0,0], 
              [0,1,0,0,0,0,0,0,0,0,0,1,0,0,0], 
              [0,1,0,1,1,1,1,1,1,1,0,1,0,0,0], 
              [0,1,1,1,0,0,0,0,0,1,0,1,0,0,0], 
              [0,0,0,0,0,1,1,1,0,1,0,1,1,0,0], 
              [0,0,0,0,1,1,0,1,0,1,0,0,1,1,0], 
              [0,0,0,1,1,0,0,1,0,1,0,0,0,1,0], 
              [0,1,1,1,0,0,1,1,0,1,0,0,0,1,0], 
              [0,1,0,0,0,1,1,0,0,1,0,0,1,1,0], 
              [0,2,0,0,0,1,0,0,0,1,0,1,1,0,0], 
              [0,1,0,0,0,1,1,1,1,1,0,1,0,0,0], 
              [0,1,1,1,0,0,0,0,0,0,0,1,0,0,0], 
              [0,0,0,1,1,1,1,1,1,1,1,1,0,0,0], 
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]

let track10 =  [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
                [0,0,1,1,1,1,1,1,1,1,1,1,1,0,0], 
                [0,0,1,0,1,0,0,0,1,0,0,0,1,1,0], 
                [0,0,1,0,1,0,0,0,1,0,0,0,0,1,0], 
                [0,0,1,0,1,0,1,0,1,0,0,0,0,1,0], 
                [0,0,1,1,1,0,1,0,1,1,1,1,1,1,0], 
                [0,0,1,0,0,0,1,0,0,0,1,0,0,1,0], 
                [0,1,1,0,0,1,1,0,0,0,1,0,0,1,0], 
                [0,2,0,0,1,1,0,0,1,1,1,0,0,1,0], 
                [0,1,0,0,0,0,0,1,1,0,0,0,0,1,0], 
                [0,1,1,1,0,0,1,1,0,0,1,1,1,1,0], 
                [0,1,0,1,1,0,1,0,0,0,1,0,0,0,0], 
                [0,1,0,0,1,1,1,1,0,0,1,0,1,1,0], 
                [0,1,1,1,1,0,0,1,1,1,1,0,1,0,0], 
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]               

// Pretty FUN!
let track5 = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
              [0,1,1,1,1,1,1,1,1,1,1,1,1,1,0], 
              [0,1,0,0,0,0,0,1,0,0,0,0,0,1,0], 
              [0,1,0,1,0,0,0,1,0,0,0,0,0,1,0], 
              [0,1,0,1,0,1,1,1,1,1,1,1,0,1,0], 
              [0,1,0,0,0,1,0,1,0,0,0,1,0,1,0], 
              [0,1,0,1,1,1,0,1,0,0,0,1,0,1,0], 
              [0,1,0,1,0,0,0,1,0,1,1,1,1,1,0], 
              [0,1,1,1,0,0,1,1,0,1,0,1,0,0,0], 
              [0,1,0,0,0,0,1,0,0,1,0,1,0,1,0], 
              [0,1,0,0,1,0,1,1,1,1,0,1,0,1,0], 
              [0,2,0,1,1,0,0,0,0,0,0,1,0,1,0], 
              [0,1,0,0,0,0,0,0,0,0,0,1,0,1,0], 
              [0,1,1,1,1,1,1,1,1,1,1,1,1,1,0], 
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]] 

let track4 = [
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0],
  [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0],
  [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0],
  [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0],
  [0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
  [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
  [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0],
  [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
  [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0],
  [0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]

let track3 = [
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
  [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0],
  [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0],
  [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0],
  [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0],
  [0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0],
  [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2, 0],
  [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0],
  [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0],
  [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0],
  [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0],
  [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]

let track15 =[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
              [1,1,1,0,1,1,1,1,1,1,0,1,1,1,0], 
              [1,0,1,0,1,0,0,0,0,1,0,1,0,1,0], 
              [1,0,1,0,0,0,1,1,1,1,0,1,0,1,0], 
              [1,0,1,1,1,0,0,0,0,1,0,1,0,1,0], 
              [1,0,0,0,1,1,1,1,0,1,0,1,0,1,0], 
              [1,1,1,0,0,0,0,1,0,1,0,1,0,0,0], 
              [0,0,1,0,0,0,0,1,0,1,1,1,1,1,0], 
              [0,0,1,0,0,0,0,1,0,0,0,1,0,1,0], 
              [1,1,1,0,0,0,0,1,1,0,0,1,0,1,0], 
              [1,0,0,0,0,0,0,0,1,1,1,1,0,1,0], 
              [1,0,0,0,1,1,1,0,0,0,0,0,0,2,0], 
              [1,1,1,0,1,0,1,1,0,0,0,1,1,1,0], 
              [0,0,1,1,1,0,0,1,1,1,1,1,0,0,0], 
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]] 

let track16 =  [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
                [0,1,0,1,1,1,0,1,1,1,0,1,1,1,0], 
                [0,1,0,1,0,1,0,1,0,1,1,1,0,1,0], 
                [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0], 
                [0,1,0,1,0,1,0,1,0,1,0,2,0,1,0], 
                [0,1,0,0,0,1,0,1,0,1,0,1,0,1,0], 
                [0,1,1,1,0,1,0,1,0,1,0,1,0,1,0], 
                [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0], 
                [0,1,0,1,0,1,0,0,0,1,0,1,0,1,0], 
                [0,1,0,1,0,1,1,1,1,1,0,1,0,1,0], 
                [0,1,0,1,0,0,0,0,0,0,0,1,0,1,0], 
                [0,1,0,1,1,1,1,1,1,1,1,1,0,1,0], 
                [0,1,0,0,0,0,0,0,0,0,0,0,0,1,0], 
                [0,1,1,1,1,1,1,1,1,1,1,1,1,1,0], 
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]] 

let track17 =  [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
                [0,1,1,1,1,1,0,1,1,1,0,1,1,1,0], 
                [0,1,0,1,0,1,0,0,0,1,0,1,0,1,0], 
                [0,1,0,1,0,1,1,1,0,1,0,1,0,1,0], 
                [0,1,0,1,0,0,0,1,0,1,0,1,0,1,0], 
                [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0], 
                [0,1,0,1,0,1,0,1,1,1,0,1,0,1,0], 
                [0,1,0,2,0,1,0,1,0,1,0,1,0,1,0], 
                [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0], 
                [0,1,0,1,0,1,1,1,0,1,0,1,0,1,0], 
                [0,1,0,1,0,0,1,0,0,1,0,1,0,1,0], 
                [0,1,0,1,1,0,0,0,0,1,1,1,0,1,0], 
                [0,1,0,0,1,1,0,0,0,0,0,0,0,1,0], 
                [0,1,1,0,0,1,1,1,1,1,1,1,1,1,0], 
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]] 

let track18 =  [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
                [0,0,0,1,1,1,1,1,1,0,0,1,0,0,0], 
                [0,1,1,1,0,0,0,0,1,1,1,1,0,0,0], 
                [0,0,1,0,0,0,1,0,0,0,0,1,1,0,0], 
                [0,0,1,0,0,1,1,1,0,0,0,0,1,0,0], 
                [0,0,1,0,0,1,0,1,0,0,1,0,1,0,0], 
                [0,0,1,0,0,1,0,1,1,0,1,0,1,1,0], 
                [0,1,1,0,0,1,0,0,1,0,1,0,0,1,0], 
                [0,1,0,0,0,1,0,0,1,0,1,0,0,1,0], 
                [0,1,0,0,1,1,0,0,1,0,1,0,1,1,0], 
                [0,1,0,0,1,0,0,0,1,0,0,0,1,0,0], 
                [0,2,0,0,1,0,0,0,1,0,0,1,1,0,0], 
                [0,1,0,0,1,1,1,0,1,0,0,1,0,0,0], 
                [0,1,1,1,1,0,0,0,1,1,1,1,0,0,0], 
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]] 

let track19 =[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
              [0,1,1,1,1,1,1,1,1,1,1,1,1,0,0], 
              [0,1,0,0,0,0,0,0,0,0,0,0,1,0,0], 
              [0,1,0,0,0,0,0,0,0,0,0,0,1,0,0], 
              [0,1,0,0,0,0,0,0,0,0,0,0,1,1,0], 
              [0,1,1,1,0,0,0,0,0,0,0,0,0,1,0], 
              [0,0,0,1,0,0,0,0,0,0,0,0,0,1,0], 
              [0,0,0,1,1,0,0,0,0,0,0,0,0,1,0], 
              [0,0,0,0,1,0,0,0,0,0,0,1,1,1,0], 
              [0,0,0,0,2,0,0,0,0,0,0,1,0,0,0], 
              [0,0,0,0,1,0,0,0,0,0,0,1,0,0,0], 
              [0,0,0,0,1,1,0,0,0,0,0,1,0,0,0], 
              [0,0,0,0,0,1,1,0,0,0,0,1,0,0,0], 
              [0,0,0,0,0,0,1,1,1,1,1,1,0,0,0], 
              [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]] 

track20 =  [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
            [0,1,1,1,1,1,1,1,1,1,1,1,1,1,0], 
            [0,1,0,0,0,1,0,1,0,1,0,0,0,1,0], 
            [0,1,0,0,1,1,0,1,0,1,1,0,0,1,0], 
            [0,1,1,0,1,0,0,1,0,0,1,0,1,1,0], 
            [0,0,1,0,1,0,1,1,0,0,1,0,1,0,0], 
            [0,0,1,0,1,0,1,0,0,1,1,0,1,1,0], 
            [0,1,1,0,1,0,1,1,0,1,0,0,0,1,0], 
            [0,1,0,0,1,0,0,1,0,1,1,1,0,1,0], 
            [0,1,0,1,1,1,0,1,0,0,0,1,0,1,0], 
            [0,1,0,1,0,1,0,1,0,1,1,1,1,1,0], 
            [0,1,1,1,0,1,0,2,0,1,0,1,0,1,0], 
            [0,1,0,0,0,0,0,1,0,0,0,0,0,1,0], 
            [0,1,1,1,1,1,1,1,1,1,1,1,1,1,0], 
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]] 

let track21 = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
[0,1,1,1,0,0,0,0,1,1,1,1,1,1,0], 
[0,1,0,1,0,0,0,0,1,0,0,0,0,1,0], 
[0,1,0,1,0,0,0,0,1,0,0,0,0,1,0], 
[0,2,0,1,1,1,0,0,1,0,0,0,1,1,0], 
[0,1,0,0,0,1,0,0,1,0,0,0,1,0,0], 
[0,1,1,0,0,1,0,0,1,0,0,0,1,0,0], 
[0,1,1,0,0,1,1,1,1,0,0,0,1,0,0], 
[0,0,1,0,0,0,0,0,0,0,0,1,1,0,0], 
[0,0,1,0,0,0,0,0,0,0,0,1,0,0,0], 
[0,0,1,0,0,0,0,0,0,0,0,1,0,0,0], 
[0,1,1,0,0,0,0,0,0,0,0,1,0,0,0], 
[0,1,0,0,0,1,1,1,1,1,1,1,0,0,0], 
[0,1,1,1,1,1,0,0,0,0,0,0,0,0,0], 
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]] 

let track22 = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
[0,0,0,0,1,1,1,1,1,1,0,0,0,0,0], 
[0,0,1,1,1,1,0,0,0,1,0,1,1,1,0], 
[0,0,1,0,0,0,0,0,0,1,0,1,0,1,0], 
[0,0,1,0,0,0,1,1,1,1,0,1,0,1,0], 
[0,0,1,1,0,0,1,0,0,0,0,1,0,1,0], 
[0,0,1,1,0,0,1,1,1,1,1,1,0,1,0], 
[0,0,0,1,0,0,1,1,1,0,0,0,0,1,0], 
[0,0,0,2,0,0,0,0,0,0,0,0,0,1,0], 
[0,0,0,1,0,0,1,1,1,1,1,1,0,1,0], 
[0,1,1,1,0,1,1,0,0,0,0,1,0,1,0], 
[0,1,0,0,0,1,0,0,0,0,0,1,0,1,0], 
[0,1,0,0,0,1,0,1,1,1,0,1,1,1,0], 
[0,1,1,1,1,1,1,1,0,1,1,1,1,0,0], 
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]] 

let track23 = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
[0,1,1,1,1,1,1,1,0,0,1,1,1,1,0], 
[0,1,0,0,0,1,0,1,0,0,1,0,0,1,0], 
[0,1,0,0,0,1,0,1,0,0,1,0,0,1,0], 
[0,1,0,0,0,1,0,1,0,0,1,0,0,1,0], 
[0,1,1,1,0,1,0,1,0,0,1,0,0,1,0], 
[0,0,0,1,0,1,0,1,1,1,1,1,0,1,0], 
[0,0,0,1,0,1,0,0,0,0,0,1,0,1,0], 
[0,0,1,1,0,1,1,1,1,1,1,1,0,1,0], 
[0,0,1,0,0,0,0,0,0,0,0,1,0,1,0], 
[0,0,2,0,1,1,1,0,1,0,1,1,0,1,0], 
[0,0,1,0,1,0,1,0,1,1,1,0,0,1,0], 
[0,0,1,1,1,0,1,0,0,0,0,0,0,1,0], 
[0,0,0,0,0,0,1,1,1,1,1,1,1,1,0], 
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]] 


let track2 = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,1,1,0,0,0,0,1,1,1,1,1,1,0],[0,1,0,1,0,0,0,0,1,0,0,0,0,1,0],[0,1,0,1,0,1,1,1,1,0,0,0,0,2,0],[0,1,0,1,0,1,0,0,0,0,0,0,0,1,0],[0,1,0,1,0,1,0,1,1,1,1,1,1,1,0],[0,1,0,1,1,1,0,1,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,1,0,1,1,1,0,0,0],[0,1,0,0,0,0,0,1,0,1,0,1,0,0,0],[0,1,0,1,1,1,0,1,0,1,0,1,0,0,0],[0,1,0,1,0,1,0,1,0,1,0,1,0,0,0],[0,1,0,1,0,1,0,1,1,1,0,1,0,0,0],[0,1,0,1,0,1,0,0,0,0,0,1,0,0,0],[0,1,1,1,0,1,1,1,1,1,1,1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]] 

let tracks = [track23, track0, track18, track16, track1, track2, track3, track4, track5, track6, track7, track8, track9, track10, track11, track12, track13, track14, track15, track17, track19, track20]

function preload(){
  tile = loadImage("tile.png")
  grass = loadImage("grass.png")
  pvmnt = loadImage("pvmt (2).png")
  start = loadImage("strt4.png")
  car10 = loadImage("carback (1).png")
  car6 = loadImage("carFront.png")
  car7 = loadImage("carFrontAngle (1).png")
  car9 = loadImage("carLeft.png")
  wKey = loadImage("Wkey (1).png")
  aKey = loadImage("Akey (1).png")
  sKey = loadImage("Skey (1).png")
  dKey = loadImage("Dkey (1).png")
}

let car = {
  angle: 10,
  speed: 0,
  x: 0,
  y: 0,
}

let startTile = [0, 0]
let level = 0;
let track = tracks[level]
let times = ""

function setup() {
  createCanvas(1200, 800)
  tile.resize(32 * tileScale, 32 * tileScale)
  grass.resize(32 * tileScale, 32 * tileScale)
  pvmnt.resize(32 * tileScale, 32 * tileScale)
  start.resize(32 * tileScale, 32 * tileScale)

  let f = 1.3
  wKey.resize(32 * tileScale * f, 32 * tileScale * f)
  aKey.resize(32 * tileScale * f, 32 * tileScale * f)
  sKey.resize(32 * tileScale * f, 32 * tileScale * f)
  dKey.resize(32 * tileScale * f, 32 * tileScale * f)

  car10.resize(32 * tileScale, 32 * tileScale)
  car6.resize(32 * tileScale, 32 * tileScale)
  car7.resize(32 * tileScale, 32 * tileScale)
  car9.resize(32 * tileScale, 32 * tileScale)
  for(let i = 0; i < 15; i++){
    for(let j = 0; j < 15; j++){
      if(track[i][j] == 2){
        car.x = i;
        car.y = j;
        startTile = [i, j]
      }
    }
  }

  frameRate(30)
  textSize(35)
  // textAlign(CENTER)
}

let counter = 0;

let dSpeed = 0.0045

let startGame = false;

let lastTile = [0, 0]
let offTrack = false;

let fall = 0;
let drawTrackAgain = false;

let scores = [];

let endGame = false;

let checkPointDist = 0;

let pressedKeys = [];

function draw() {
  background(20)
  if(!startGame){
    frameCount = 0
  }

  // WASD Input Display
  push()
    let sclDown = 0.9
    imageMode(CENTER)
    translate(1100, 100)
    scale(0.8)
    
    if(keyIsDown("87")){
      push()
        scale(sclDown, sclDown)
        image(wKey, 0, -40)
      pop()
    } else {
      image(wKey, 0,-40)
    }
    if(keyIsDown("83")){
      push()
        scale(sclDown, sclDown)
        image(sKey, 0, 40)
      pop()
    } else {
      image(sKey, 0, 40)
    }
    if(keyIsDown("65")){
      push()
        translate(-80, 40)
        scale(sclDown, sclDown)
        image(aKey, 0, 0)
      pop()
    } else {
      image(aKey, -80, 40)
    }
    if(keyIsDown("68")){
      push()
        translate(80, 40)
        scale(sclDown, sclDown)
        image(dKey, 0, 0)
      pop()
    } else {
      image(dKey, 80, 40)
    }
  pop()

  // if(dist(car.x, car.y, startTile[0], startTile[1]) > )

  let distFromStart = dist(car.x, car.y, startTile[0], startTile[1])
  checkPointDist = distFromStart > checkPointDist ? distFromStart : checkPointDist;

  if(car.x > 15 || car.y > 15 || car.y < -1 || car.x < -1){
    car.speed = 0;
    fall += 0.02;
    if(car.y < -1 || car.x < -1) drawTrackAgain = true;
  }

  if(fall > 0){
    fall += 0.02;
    car.x += fall;
    car.y += fall;
    if(fall > 1.6){
      car.speed = 0
      counter = 0;
      car.x = startTile[0];
      car.y = startTile[1]
      startGame = false;
      endGame = false;
      offTrack = false;
      fall = 0;
      car.angle = 10
      drawTrackAgain = false;
    }
  }

  if(!endGame) timer = frameCount / 30
  if(endGame) {
    fill(0, 255, 0)
    // if(car.speed < 0.0001) fall += 1 + fall/5
  } else{
    fill(120, 120, 255)
  }
  // if(mouseIsPressed) endGame = true;
  stroke(0)
  strokeWeight(3)
  
  textSize(60)
  text(round(timer *10)/10, 100, 100)

  if(startGame && frameCount > 30 * 5 && !offTrack && checkPointDist > 10){
    if(distFromStart < 0.5 && car.angle == 10){
      endGame = true;
    }
  }

  if(keyIsDown("87") && pressedKeys[pressedKeys.length-1] == 87 && !endGame){
    car.angle = 10
    car.speed += dSpeed + car.speed * dSpeed;
    if(!startGame) {
      startGame = true;
      frameCount = 0;
    }
  }
  else if(keyIsDown("83") && pressedKeys[pressedKeys.length-1] == 83 && !endGame){
    car.angle = 5
    car.speed += dSpeed + car.speed * dSpeed;
  }
  else if(keyIsDown("65") && pressedKeys[pressedKeys.length-1] == 65 && !endGame){
    car.angle = 7
    car.speed += dSpeed + car.speed * dSpeed;
    if(!startGame) {
      startGame = true;
      frameCount = 0;
    }
  }
  else if(keyIsDown("68") && pressedKeys[pressedKeys.length-1] == 68 && !endGame){
    car.angle = 2
    car.speed += dSpeed + car.speed * dSpeed;
    if(!startGame) {
      startGame = true;
      frameCount = 0;
    }
  }

  car.speed *= 0.975
  if(car.angle == 10){
    car.x -= car.speed;
  }
  if(car.angle == 2){
    car.y -= car.speed;
  }
  if(car.angle == 5){
    car.x += car.speed;
  }
  if(car.angle == 7){
    car.y += car.speed;
  }

  translate(width/2, height/3)

  let nearest = [0, 0]
  let d = 100000;

  for(let i = 0; i < 15; i++){
    for(let j = 0; j < 15; j++){
      
      let tsc = to_screen_coordinate({x: i, y: j});
      if(track[i][j] == 1 || track[i][j] == 2) {
        if(dist(car.x, car.y, i, j) < d){
          d = dist(car.x, car.y, i, j)
          nearest = [i, j]
        }
        if(track[i][j] == 2){
          // image(start, tsc.x, tsc.y - 60)
          // image(pvmnt, tsc.x, tsc.y + 5 + fall)
          image(start, tsc.x, tsc.y + 5 + fall)
          // tsc = to_screen_coordinate({x: i - mouseX/10, y: j}); 
          
        } else {
          image(pvmnt, tsc.x, tsc.y + 5 + fall)
        }
        
      } else if(track[i][j] == 0) {
        image(grass, tsc.x, tsc.y + fall)
      }
      
    }
  }
  tsc = to_screen_coordinate({x: car.x, y: car.y});

  tscNearest = to_screen_coordinate({x: nearest[0], y: nearest[1]});
  // image(tile, tscNearest.x, tscNearest.y)
  if(offTrack) image(tile, lastTile.x, lastTile.y)


  if(d > 1){
    car.speed *= (0.975 - d/30) 
  } else if(d > 0.9){
    if(!offTrack){
      lastTile = tscNearest
    }
    offTrack = true;
  } else if(d > 0.6){
    car.speed *= 0.89
  }
  else if(d > 0.5){
    car.speed *= 0.9
  }

  let lastTileGrid =  to_grid_coordinate(lastTile)
  if(dist(car.x, car.y, lastTileGrid.x, lastTileGrid.y) < 0.8 && offTrack){
    offTrack = false;
  }

  if(car.angle == 10){
    image(car10, tsc.x, tsc.y - 32 + 5)
  } else if(car.angle == 2){ 
    push()
      translate(tsc.x + 32*2, tsc.y - 32 + 5)
      scale(-1, 1)
      image(car10, 0, 0)
    pop()
  } else if(car.angle == 5){
    push()
      translate(tsc.x + 32*2, tsc.y - 32 + 5)
      scale(-1, 1)
      image(car7, 0, 0)
    pop()
  } else if(car.angle == 7){
    image(car7, tsc.x, tsc.y - 32 + 5)
  }

  if(endGame){
    if(car.speed < 0.01){
      car.speed = 0
      level += 1;
      track = tracks[level];
      for(let i = 0; i < 15; i++){
        for(let j = 0; j < 15; j++){
          if(track[i][j] == 2){
            car.x = i;
            car.y = j;
            startTile = [i, j]
          }
        }
      }
      counter = 0;
      startGame = false;
      endGame = false;
      offTrack = false;
      times = times + level + ": " + round(timer *10)/10 + " \n"
    }
  }

  // Draw level times
  push()
  fill(120, 120, 255)
    textSize(32)
    text(times, -width/2 + 10, -100)
  pop()

  if(drawTrackAgain){
    for(let i = 0; i < 15; i++){
      for(let j = 0; j < 15; j++){
        
        let tsc = to_screen_coordinate({x: i, y: j});
        if(track[i][j] == 1 || track[i][j] == 2) {
          if(dist(car.x, car.y, i, j) < d){
            d = dist(car.x, car.y, i, j)
            nearest = [i, j]
          }
          if(track[i][j] == 2){
            // image(start, tsc.x, tsc.y - 60)
            // image(pvmnt, tsc.x, tsc.y + 5 + fall)
            image(start, tsc.x, tsc.y + 5 + fall)
            // tsc = to_screen_coordinate({x: i - mouseX/10, y: j}); 
            
          } else {
            image(pvmnt, tsc.x, tsc.y + 5 + fall)
          }
          
        } else if(track[i][j] == 0) {
          image(grass, tsc.x, tsc.y + fall)
        }
        
      }
    }
  }
  
  counter += 0.1
}

function keyPressed(){
  if(keyCode == 87 || keyCode == 83 || keyCode == 65 || keyCode == 68) {
    pressedKeys.push(keyCode)
  }
}

function keyReleased(){
  if(keyCode == 87 || keyCode == 83 || keyCode == 65 || keyCode == 68) {
    pressedKeys.pop()
  }
}

function to_screen_coordinate(tile) {
  // Without accounting for sprite size
  // return {
  //   x: tile.x * i_x + tile.y * j_x,
  //   y: tile.x * i_y + tile.y * j_y,
  // }

  // Accounting for sprite size
  return {
    x: tile.x * i_x * 0.5 * w + tile.y * j_x * 0.5 * w,
    y: tile.x * i_y * 0.5 * h + tile.y * j_y * 0.5 * h,
  }
}

// Going from screen coordinate to grid coordinate

function invert_matrix(a, b, c, d) {
  // Determinant 
  const det = (1 / (a * d - b * c));
  
  return {
    a: det * d,
    b: det * -b,
    c: det * -c,
    d: det * a,
  }
}

function to_grid_coordinate(screen) {
  const a = i_x * 0.5 * w;
  const b = j_x * 0.5 * w;
  const c = i_y * 0.5 * h;
  const d = j_y * 0.5 * h;
  
  const inv = invert_matrix(a, b, c, d);
  
  return {
    x: screen.x * inv.a + screen.y * inv.b,
    y: screen.x * inv.c + screen.y * inv.d,
  }
}